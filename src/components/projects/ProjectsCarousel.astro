---
import ProjectCard from './ProjectCard.astro';
import { projects } from '../../data/projectsData.js';
import { ClientRouter } from 'astro:transitions';
---

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glidejs/glide@3.7.1/dist/css/glide.core.min.css"/>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@glidejs/glide@3.7.1/dist/css/glide.theme.min.css"/>

<script type="module">
  import Glide from 'https://cdn.jsdelivr.net/npm/@glidejs/glide@3.7.1/dist/glide.esm.min.js';

  function initializeGlide() {
    const rootElement = document.querySelector('.glide');
    if (!rootElement || rootElement.dataset.glideInitialized) return;

    const savedSlideIndex = parseInt(localStorage.getItem('activeSlide'), 10) || 0;
    const glide = new Glide(rootElement, {
      type: 'carousel',
      perView: 1,
      gap: 0,
      focusAt: 'center',
      peek: 325,
      dragThreshold: 80,
      startAt: savedSlideIndex,
      breakpoints: {
        768: { peek: 0, gap: 0 }
      }
    });

    glide.on('run.after', () => {
      const slides = document.querySelectorAll('.glide__slide');
      slides.forEach((slide, index) => {
        slide.classList.toggle('astro-transition-active', index === glide.index);
      });
      localStorage.setItem('activeSlide', glide.index);
    });

    glide.mount();
    rootElement.dataset.glideInitialized = 'true';
    window.glideInstance = glide;
  }

  if (!window.hasPageLoadListener) {
    document.addEventListener('astro:page-load', () => {
      setTimeout(initializeGlide, 100);
    });
    window.hasPageLoadListener = true;
  }

  document.addEventListener('DOMContentLoaded', initializeGlide);
</script>

<div class="projects-carousel-section" id="projects">
  <div class="max-w-[1350px] mx-auto px-4 mt-20">
    <h2 class="font-bold leading-tight text-[clamp(2rem,4vw,4rem)] pointer-events-none interactive-text sm:pl-[8%] sm:text-left text-center mb-0">
      MY PROJECTS
    </h2>

    <div class="absolute flex flex-col items-center text-white pl-[750px] -translate-y-2 sm:-translate-y-3 md:-translate-y-8">
      <svg xmlns="http://www.w3.org/2000/svg" width="80" height="40" viewBox="0 0 80 40" class="ml-4">
        <defs>
          <clipPath id="viewport">
            <rect x="0" y="0" width="78" height="40"/>
          </clipPath>
          <linearGradient id="fadeLeft" x1="0%" y1="0%" x2="100%" y2="0%">
            <stop offset="0%" stop-color="black" stop-opacity="1"/>
            <stop offset="100%" stop-color="black" stop-opacity="0"/>
          </linearGradient>
          <linearGradient id="fadeRight" x1="0%" y1="0%" x2="100%" y2="0%">
            <stop offset="0%" stop-color="black" stop-opacity="0"/>
            <stop offset="100%" stop-color="black" stop-opacity="1"/>
          </linearGradient>
        </defs>

        <g clip-path="url(#viewport)">
          <g id="cardA">
            <rect class="card" y="14" width="16" height="12" rx="1.6" ry="1.6" fill="#3b82f6">
              <animate attributeName="x" from="-8" to="-40" dur="3s" repeatCount="indefinite" calcMode="linear"/>
            </rect>
          </g>

          <g id="cardB">
            <rect class="card" x="24" y="11.2" width="24" height="18" rx="1.6" ry="1.6" fill="#3b82f6">
              <animate attributeName="x" from="24" to="-8" dur="3s" repeatCount="indefinite" calcMode="linear"/>
              <animate attributeName="width" from="24" to="16" dur="3s" repeatCount="indefinite" calcMode="linear"/>
              <animate attributeName="height" from="18" to="12" dur="3s" repeatCount="indefinite" calcMode="linear"/>
              <animate attributeName="y" from="11.2" to="14" dur="3s" repeatCount="indefinite" calcMode="linear"/>
            </rect>
          </g>

          <g id="cardC">
            <rect class="card" x="56" y="14" width="16" height="12" rx="1.6" ry="1.6" fill="#3b82f6">
              <animate attributeName="x" from="56" to="24" dur="3s" repeatCount="indefinite" calcMode="linear"/>
              <animate attributeName="width" from="16" to="24" dur="3s" repeatCount="indefinite" calcMode="linear"/>
              <animate attributeName="height" from="12" to="18" dur="3s" repeatCount="indefinite" calcMode="linear"/>
              <animate attributeName="y" from="14" to="11.2" dur="3s" repeatCount="indefinite" calcMode="linear"/>
            </rect>
          </g>

          <g id="cardD">
            <rect class="card" x="88" y="14" width="16" height="12" rx="1.6" ry="1.6" fill="#3b82f6">
              <animate attributeName="x" from="88" to="56" dur="3s" repeatCount="indefinite" calcMode="linear"/>
            </rect>
          </g>
        </g>

        <rect x="-15" y="0" width="44" height="40" fill="url(#fadeLeft)" pointer-events="none"/>
        <rect x="35" y="0" width="44" height="40" fill="url(#fadeRight)" pointer-events="none"/>
      </svg>

      <p class="text-lg font-handrawn tracking-widest pt-1">Hold and slide the cards to explore</p>
      <p class="text-lg font-handrawn tracking-widest mt-2">
        or use
        <kbd id="arrow-left" class="inline-block px-2 bg-blue-500/80 text-white rounded">←</kbd>
        <kbd id="arrow-right" class="inline-block px-2 bg-blue-500/80 text-white rounded">→</kbd>
        keys to navigate.
      </p>
    </div>

    <p class="text-base text-zinc-300 max-w-xl font-medium z-30 sm:pl-[8%] text-left mb-10 mt-10">
      Explore a range of my projects that blend full stack development with creative design, offering a mix of <b>coding and visual</b> innovation.
    </p>

    <div class="relative">
      <div class="glide mx-auto relative">
        <div class="glide__track" data-glide-el="track" transition:name="project">
          <ul class="glide__slides" id="slides">
            {projects.map((project, idx) => (
              <li class="glide__slide pb-40 pt-20" data-index={idx} key={idx}>
                <ProjectCard {...project} />
              </li>
            ))}
          </ul>
        </div>
        <div class="glide__bullets mt-6 flex justify-center" data-glide-el="controls[nav]">
          {projects.map((_, i) => (
            <button class="glide__bullet mx-1" data-glide-dir={`=${i}`} key={i}></button>
          ))}
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .glide__slide {
    pointer-events: none;
    transform: scale(1);
    transition: transform 0.4s ease-in-out, filter 0.4s ease-in-out;
    position: relative;
    filter: blur(3px);
  }
  .glide__slide--active {
    pointer-events: auto;
    transform: scale(1.3);
    filter: blur(0px);
  }
  .glide__track {
    position: relative;
  }
  .glide__track::before,
  .glide__track::after {
    content: "";
    position: absolute;
    top: 0;
    bottom: 0;
    width: 320px;
    pointer-events: none;
    z-index: 2;
  }
  .glide__track::before {
    left: 0;
    background: linear-gradient(to right, rgba(0, 0, 0, 1), transparent);
  }
  .glide__track::after {
    right: 0;
    background: linear-gradient(to left, rgba(0, 0, 0, 1), transparent);
  }
  @keyframes blink {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.2; transform: scale(0.9)}
  }
  .blink {
    animation: blink 0.5s ease;
  }
</style>

<script>
  document.addEventListener('keydown', (event) => {
    if (event.key === 'ArrowLeft') {
      const kbd = document.getElementById('arrow-left');
      if (kbd) {
        kbd.classList.add('blink');
        setTimeout(() => kbd.classList.remove('blink'), 500);
      }
    } else if (event.key === 'ArrowRight') {
      const kbd = document.getElementById('arrow-right');
      if (kbd) {
        kbd.classList.add('blink');
        setTimeout(() => kbd.classList.remove('blink'), 500);
      }
    }
  });
</script>
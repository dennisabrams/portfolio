---
import { Image } from 'astro:assets';

const imagesRow1 = [
  { src: '/images/img1.webp', alt: 'Beschreibung für Bild 1' },
  { src: '/images/img2.webp', alt: 'Beschreibung für Bild 2' },
  { src: '/images/img3.webp', alt: 'Beschreibung für Bild 3' },
  { src: '/images/img4.webp', alt: 'Beschreibung für Bild 4' },
  { src: '/images/img5.webp', alt: 'Beschreibung für Bild 5' },
];
const imagesRow2 = [
  { src: '/images/img6.webp', alt: 'Beschreibung für Bild 6' },
  { src: '/images/img7.webp', alt: 'Beschreibung für Bild 7' },
  { src: '/images/img8.webp', alt: 'Beschreibung für Bild 8' },
  { src: '/images/img9.webp', alt: 'Beschreibung für Bild 9' },
  { src: '/images/img10.webp', alt: 'Beschreibung für Bild 10' },
];
const imagesRow3 = [
  { src: '/images/img11.webp', alt: 'Beschreibung für Bild 11' },
  { src: '/images/img12.webp', alt: 'Beschreibung für Bild 12' },
  { src: '/images/img13.webp', alt: 'Beschreibung für Bild 13' },
  { src: '/images/img14.webp', alt: 'Beschreibung für Bild 14' },
  { src: '/images/img15.webp', alt: 'Beschreibung für Bild 15' },
];
---

<section class="relative w-full h-[600px] sm:h-[800px] overflow-hidden bg-black">
  <div class="absolute inset-0 flex flex-row items-center justify-center">
    <div class="relative w-[280px] sm:w-[350px] lg:w-[450px] h-full overflow-hidden column-with-opacity px-2 sm:px-5 lg:px-10">
      <div class="flex flex-col animate-loopUp" style="animation-duration: 60s;">
        {[...imagesRow1, ...imagesRow1].map((img, i) => (
          <div class="pt-6 sm:pt-8 lg:pt-10" key={i}>
            <Image
              src={img.src}
              alt={img.alt}
              layout="responsive"
              width={450}
              height={550}
              formats={['webp', 'jpeg']}
              fit="cover"
              position="center"
              class="w-full object-cover block rounded-lg sm:rounded-xl pointer-events-none select-none"
              draggable="false"
            />
          </div>
        ))}
      </div>
    </div>

    <div class="hidden sm:block relative w-[350px] xl:w-[450px] h-full overflow-hidden column-with-opacity px-1 xl:px-1">
      <div class="flex flex-col animate-loopDown" style="animation-duration: 110s;">
        {[...imagesRow2, ...imagesRow2].map((img, i) => (
          <div class="pt-8 xl:pt-10" key={i}>
            <Image
              src={img.src}
              alt={img.alt}
              layout="responsive"
              width={450}
              height={480}
              formats={['webp', 'jpeg']}
              fit="cover"
              position="center"
              class="w-full object-cover block rounded-lg sm:rounded-xl pointer-events-none select-none"
              draggable="false"
            />
          </div>
        ))}
      </div>
    </div>

    <div class="hidden xl:block relative w-[450px] h-full overflow-hidden column-with-opacity px-5 xl:px-10">
      <div class="flex flex-col animate-loopUp" style="animation-duration: 60s;">
        {[...imagesRow3, ...imagesRow3].map((img, i) => (
          <div class="pt-10" key={i}>
            <Image
              src={img.src}
              alt={img.alt}
              layout="responsive"
              width={450}
              height={400}
              formats={['webp', 'jpeg']}
              fit="cover"
              position="center"
              class="w-full object-cover block rounded-xl pointer-events-none select-none"
              draggable="false"
            />
          </div>
        ))}
      </div>
    </div>
  </div>

  <div id="hover-effect" class="relative z-20 w-full h-full flex items-start justify-center pointer-events-none mt-[4%] sm:mt-[6%] font-open">
    <div class="w-full max-w-[1350px] h-full flex flex-col pointer-events-auto relative z-30">
      <div class="hidden sm:block xl:hidden px-6 py-8">
        <div class="flex flex-col items-center text-center space-y-6">
          <div class="space-y-4">
            <h1 class="font-bold leading-tight text-[clamp(2.5rem,8vw,4rem)] pointer-events-none interactive-text">WEB &amp; LINUX</h1>
            <div class="flex items-center justify-center space-x-4">
              <div class="relative w-[clamp(2.5rem,6vw,3.5rem)] h-[clamp(2.5rem,6vw,3.5rem)] group">
                <img
                  src="/images/dennisavatar.png"
                  alt="Avatar"
                  class="absolute inset-0 w-full h-full object-cover transition-opacity duration-1000 group-hover:opacity-0 pointer-events-none select-none avatar-normal rounded-full"
                />
                <img
                  src="/images/dennisavatarhover.png"
                  alt="Avatar Hover"
                  class="absolute inset-0 w-full h-full object-cover transition-opacity duration-1000 opacity-0 group-hover:opacity-100 pointer-events-none select-none avatar-hover rounded-full"
                />
              </div>
              <h1 class="font-bold leading-tight text-[clamp(2.5rem,8vw,4rem)] pointer-events-none interactive-text">STACK DEVELOPER</h1>
            </div>
          </div>
          <div class="flex items-center justify-center text-white">
            <svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 256 256" class="w-10 h-10 fill-current mr-2" aria-hidden="true">
              <defs>
                <style>
                  @keyframes moveUpDown {
                    0% { transform: translateY(0); }
                    50% { transform: translateY(-5px); }
                    100% { transform: translateY(0); }
                  }
                  .red-marker {
                    animation: moveUpDown 3s ease-in-out infinite;
                  }
                </style>
              </defs>
              <g transform="translate(1.4065934065934016 1.4065934065934016) scale(2.81 2.81)" style="fill: none; stroke: none;">
                <polygon points="88,83.29 2,83.29 17.59,55.42 39.4,55.42 45,55.42 50.6,55.42 72.42,55.42" style="fill: rgb(14,171,97);" />
                <polygon points="2,83.29 76.76,63.2 88,83.29" style="fill: rgb(21,155,225);" />
                <path d="M1.999 85.294c-.882 0-1.69-.589-1.93-1.481-.287-1.067.346-2.164 1.413-2.451l74.762-20.098c1.068-.287 2.165.346 2.451 1.412.286 1.067-.346 2.164-1.412 2.451L2.519 85.224c-.173.047-.348.07-.52.07z" style="fill: rgb(254,217,65);" />
                <path d="M63.1 79.329c-.57 0-1.137-.243-1.532-.714l-7.166-8.535c-.711-.846-.601-2.107.245-2.817.846-.711 2.108-.6 2.817.245l7.166 8.535c.711.846.601 2.107-.245 2.817-.405.471-.961.469-1.451.469z" style="fill: rgb(254,217,65);" />
                <path d="M34.66 76.513c-.57 0-1.137-.243-1.533-.714l-9.818-11.694c-.71-.846-.6-2.107.246-2.818.847-.709 2.108-.599 2.818.246l9.818 11.694c.71.846.6 2.107-.246 2.818-.406.471-.962.468-1.285.468z" style="fill: rgb(254,217,65);" />
                <path d="M88 85.293H2c-.709 0-1.366-.376-1.725-.988-.359-.612-.367-1.368-.021-1.987L15.84 54.444c.354-.633 1.021-1.024 1.746-1.024h54.83c.725 0 1.393.392 1.746 1.024l15.585 27.873c.346.619.338 1.375-.021 1.987-.359.612-1.016.988-1.726.988zM5.41 81.293h79.18L71.242 57.42H18.758L5.41 81.293z" style="fill: rgb(188,220,254);" />
                <g class="red-marker">
                  <path d="M42.52 18.239c-7.702 1.189-13.385 8.127-13.166 15.917.063 2.236.589 4.383 1.565 6.387 1.72 3.45 7.145 12.622 12.392 21.492.759 1.285 2.618 1.285 3.377 0l.01-.018c5.242-8.863 10.662-18.026 12.385-21.484.006-.012.012-.024.018-.035 1.028-2.128 1.549-4.416 1.549-6.8.001-9.984-8.407-17.502-18.131-16.001z" style="fill: rgb(203,0,16);" />
                  <circle cx="45.02" cy="33.42" r="6" style="fill: rgb(255,255,255);" />
                </g>
              </g>
            </svg>
            <p class="text-base font-handrawn tracking-wide">Based in Hanover, Germany</p>
          </div>
        </div>
      </div>

      <div class="hidden xl:flex flex-col items-start space-y-4 px-4 xl:pl-[8%]">
        <div class="flex flex-col xl:flex-row xl:items-center space-y-3 xl:space-y-0 xl:space-x-4">
          <h1 class="font-bold leading-tight text-[clamp(3rem,7vw,6rem)] pointer-events-none interactive-text">WEB &amp; LINUX</h1>
          <div class="flex flex-col items-center text-white xl:pl-28 rotate-12 -translate-y-2 xl:-translate-y-4">
            <svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 256 256" class="w-12 h-12 fill-current" aria-hidden="true">
              <defs>
                <style>
                  @keyframes moveUpDown {
                    0% { transform: translateY(0); }
                    50% { transform: translateY(-5px); }
                    100% { transform: translateY(0); }
                  }
                  .red-marker {
                    animation: moveUpDown 3s ease-in-out infinite;
                  }
                </style>
              </defs>
              <g transform="translate(1.4065934065934016 1.4065934065934016) scale(2.81 2.81)" style="fill: none; stroke: none;">
                <polygon points="88,83.29 2,83.29 17.59,55.42 39.4,55.42 45,55.42 50.6,55.42 72.42,55.42" style="fill: rgb(14,171,97);" />
                <polygon points="2,83.29 76.76,63.2 88,83.29" style="fill: rgb(21,155,225);" />
                <path d="M1.999 85.294c-.882 0-1.69-.589-1.93-1.481-.287-1.067.346-2.164 1.413-2.451l74.762-20.098c1.068-.287 2.165.346 2.451 1.412.286 1.067-.346 2.164-1.412 2.451L2.519 85.224c-.173.047-.348.07-.52.07z" style="fill: rgb(254,217,65);" />
                <path d="M63.1 79.329c-.57 0-1.137-.243-1.532-.714l-7.166-8.535c-.711-.846-.601-2.107.245-2.817.846-.711 2.108-.6 2.817.245l7.166 8.535c.711.846.601 2.107-.245 2.817-.405.471-.961.469-1.451.469z" style="fill: rgb(254,217,65);" />
                <path d="M34.66 76.513c-.57 0-1.137-.243-1.533-.714l-9.818-11.694c-.71-.846-.6-2.107.246-2.818.847-.709 2.108-.599 2.818.246l9.818 11.694c.71.846.6 2.107-.246 2.818-.406.471-.962.468-1.285.468z" style="fill: rgb(254,217,65);" />
                <path d="M88 85.293H2c-.709 0-1.366-.376-1.725-.988-.359-.612-.367-1.368-.021-1.987L15.84 54.444c.354-.633 1.021-1.024 1.746-1.024h54.83c.725 0 1.393.392 1.746 1.024l15.585 27.873c.346.619.338 1.375-.021 1.987-.359.612-1.016.988-1.726.988zM5.41 81.293h79.18L71.242 57.42H18.758L5.41 81.293z" style="fill: rgb(188,220,254);" />
                <g class="red-marker">
                  <path d="M42.52 18.239c-7.702 1.189-13.385 8.127-13.166 15.917.063 2.236.589 4.383 1.565 6.387 1.72 3.45 7.145 12.622 12.392 21.492.759 1.285 2.618 1.285 3.377 0l.01-.018c5.242-8.863 10.662-18.026 12.385-21.484.006-.012.012-.024.018-.035 1.028-2.128 1.549-4.416 1.549-6.8.001-9.984-8.407-17.502-18.131-16.001z" style="fill: rgb(203,0,16);" />
                  <circle cx="45.02" cy="33.42" r="6" style="fill: rgb(255,255,255);" />
                </g>
              </g>
            </svg>
            <p class="text-center text-lg font-handrawn tracking-widest pt-1">Based in <span id="underline-effect">Hanove</span>r,<br />Germany :)</p>
          </div>
        </div>

        <div class="flex items-center space-x-6 xl:pl-20">
          <div class="relative w-[clamp(3rem,6vw,6rem)] h-[clamp(3rem,6vw,6rem)] group">
            <img
              src="/images/dennisavatar.png"
              alt="Avatar"
              class="absolute inset-0 w-full h-full object-cover transition-opacity duration-1000 group-hover:opacity-0 pointer-events-none select-none avatar-normal"
            />
            <img
              src="/images/dennisavatarhover.png"
              alt="Avatar Hover"
              class="absolute inset-0 w-full h-full object-cover transition-opacity duration-1000 opacity-0 group-hover:opacity-100 pointer-events-none select-none avatar-hover"
            />
          </div>
          <h1 class="font-bold leading-tight text-[clamp(3rem,7vw,6rem)] pointer-events-none interactive-text">STACK DEVELOPER</h1>
        </div>
      </div>

      <div class="block sm:hidden px-4 py-6">
        <div class="flex flex-col space-y-6">
          <div class="relative w-[clamp(4rem,15vw,6rem)] h-[clamp(4rem,15vw,6rem)] group">
            <img
              src="/images/dennisavatar.png"
              alt="Avatar"
              class="absolute inset-0 w-full h-full object-cover transition-opacity duration-1000 group-hover:opacity-0 pointer-events-none select-none avatar-normal rounded-full"
            />
            <img
              src="/images/dennisavatarhover.png"
              alt="Avatar Hover"
              class="absolute inset-0 w-full h-full object-cover transition-opacity duration-1000 opacity-0 group-hover:opacity-100 pointer-events-none select-none avatar-hover rounded-full"
            />
          </div>
          <div class="space-y-2">
            <h1 class="font-extrabold leading-tight text-[clamp(1.5rem,8vw,2.5rem)] text-white">WEB &amp; LINUX</h1>
            <h1 class="font-extrabold leading-tight text-[clamp(1.5rem,8vw,2.5rem)] text-white">STACK DEVELOPER</h1>
          </div>
        </div>
      </div>

      <div class="flex flex-col sm:flex-row items-start sm:items-center gap-6 sm:gap-6 xl:gap-20 mt-[4%] sm:mt-[6%] xl:mt-[8%] px-4 sm:px-6 xl:px-[8%] pb-16 sm:pb-20 xl:pb-16">
        <div class="flex flex-col sm:flex-row items-start sm:items-center gap-4 sm:gap-0">
          <a
            href="https://github.com/dennisabrams"
            target="_blank"
            rel="noopener noreferrer"
            class="inline-flex items-center gap-2 justify-center px-4 sm:px-5 xl:px-6 py-2 sm:py-3 bg-black/50 rounded-md hover:bg-white/30 transition-colors whitespace-nowrap shrink-0 text-sm sm:text-base min-h-[44px]"
          >
            <img
              src="https://img.icons8.com/ios11/512/FFFFFF/github.png"
              alt="GitHub"
              class="w-5 h-5 sm:w-6 sm:h-6 rounded-full object-cover"
            />
            <span class="font-semibold">dennisabrams</span>
          </a>
          <div class="flex sm:hidden items-center text-white ml-4">
            <svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 256 256" class="w-8 h-8 fill-current mr-2" aria-hidden="true">
              <defs>
                <style>
                  @keyframes moveUpDown {
                    0% { transform: translateY(0); }
                    50% { transform: translateY(-5px); }
                    100% { transform: translateY(0); }
                  }
                  .red-marker {
                    animation: moveUpDown 3s ease-in-out infinite;
                  }
                </style>
              </defs>
              <g transform="translate(1.4065934065934016 1.4065934065934016) scale(2.81 2.81)" style="fill: none; stroke: none;">
                <polygon points="88,83.29 2,83.29 17.59,55.42 39.4,55.42 45,55.42 50.6,55.42 72.42,55.42" style="fill: rgb(14,171,97);" />
                <polygon points="2,83.29 76.76,63.2 88,83.29" style="fill: rgb(21,155,225);" />
                <path d="M1.999 85.294c-.882 0-1.69-.589-1.93-1.481-.287-1.067.346-2.164 1.413-2.451l74.762-20.098c1.068-.287 2.165.346 2.451 1.412.286 1.067-.346 2.164-1.412 2.451L2.519 85.224c-.173.047-.348.07-.52.07z" style="fill: rgb(254,217,65);" />
                <path d="M63.1 79.329c-.57 0-1.137-.243-1.532-.714l-7.166-8.535c-.711-.846-.601-2.107.245-2.817.846-.711 2.108-.6 2.817.245l7.166 8.535c.711.846.601 2.107-.245 2.817-.405.471-.961.469-1.451.469z" style="fill: rgb(254,217,65);" />
                <path d="M34.66 76.513c-.57 0-1.137-.243-1.533-.714l-9.818-11.694c-.71-.846-.6-2.107.246-2.818.847-.709 2.108-.599 2.818.246l9.818 11.694c.71.846.6 2.107-.246 2.818-.406.471-.962.468-1.285.468z" style="fill: rgb(254,217,65);" />
                <path d="M88 85.293H2c-.709 0-1.366-.376-1.725-.988-.359-.612-.367-1.368-.021-1.987L15.84 54.444c.354-.633 1.021-1.024 1.746-1.024h54.83c.725 0 1.393.392 1.746 1.024l15.585 27.873c.346.619.338 1.375-.021 1.987-.359.612-1.016.988-1.726.988zM5.41 81.293h79.18L71.242 57.42H18.758L5.41 81.293z" style="fill: rgb(188,220,254);" />
                <g class="red-marker">
                  <path d="M42.52 18.239c-7.702 1.189-13.385 8.127-13.166 15.917.063 2.236.589 4.383 1.565 6.387 1.72 3.45 7.145 12.622 12.392 21.492.759 1.285 2.618 1.285 3.377 0l.01-.018c5.242-8.863 10.662-18.026 12.385-21.484.006-.012.012-.024.018-.035 1.028-2.128 1.549-4.416 1.549-6.8.001-9.984-8.407-17.502-18.131-16.001z" style="fill: rgb(203,0,16);" />
                  <circle cx="45.02" cy="33.42" r="6" style="fill: rgb(255,255,255);" />
                </g>
              </g>
            </svg>
            <p class="text-sm font-handrawn tracking-wide">Based in Hanover</p>
          </div>
        </div>
        <p class="order-0 sm:order-1 max-w-lg text-sm sm:text-base leading-relaxed text-zinc-300 font-medium z-30">
          Hello, I am Dennis – a developer working with <b>PHP</b>, <b>JS Frameworks</b>, and <b>Lua</b> for app modifications. I manage <b>Linux servers</b>, automate tasks with <b>Bash scripting</b>, <span class="text-zinc-400">and create visuals using <b>After Effects</b> as a hobby,</span> separate from programming.
        </p>
        <div class="order-2 button-container">
          <a
            href="mailto:Dennis%20Abrams%20%3Chello@dennis-abrams.com%3E"
            class="text-base sm:text-lg px-6 sm:px-8 xl:px-10 py-3 font-semibold bg-blue-500 rounded-lg transition-colors whitespace-nowrap flex items-center group hover:bg-blue-600 min-h-[44px]"
            id="contact-button"
          >
            Contact Me
            <svg
              class="w-4 h-4 sm:w-5 sm:h-5 ml-2 fill-white group-hover:fill-white transition-colors"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path d="M21.793,4c-.112-.319-.378-.559-.706-.639-.172-.042-4.257-1.025-9.087-1.025-4.744,0-8.907,.982-9.082,1.024-.333,.08-.601,.323-.712,.646-.049,.143-1.206,3.536-1.206,7.994s1.156,7.852,1.206,7.994c.112,.324,.383,.568,.717,.646,.178,.042,4.42,1.023,9.078,1.023,4.819,0,8.914-.983,9.086-1.025,.33-.08,.596-.322,.708-.643-.049-.141,1.206-3.51,1.206-7.996,0-4.525-1.158-7.86-1.207-8Zm-9.793,.336c3.591,0,6.82,.589,8.067,.848,.069,.241,.156,.561,.247,.949-.56,.591-1.981,2.025-3.959,3.551-1.642,1.267-3.499,2.381-4.355,2.875-.856-.494-2.71-1.606-4.356-2.876-1.973-1.521-3.39-2.951-3.954-3.545,.091-.388,.177-.71,.246-.953,1.264-.259,4.527-.849,8.064-.849Zm8.064,14.479c-1.251,.26-4.483,.848-8.064,.848-3.472,0-6.785-.593-8.066-.852-.304-1.072-.934-3.668-.934-6.812,0-1.265,.103-2.444,.246-3.471,.77,.742,1.851,1.716,3.177,2.739,2.338,1.804,4.986,3.258,5.098,3.319,.15,.082,.315,.123,.48,.123s.33-.041,.479-.123c.112-.061,2.76-1.515,5.098-3.319,1.329-1.025,2.411-2.001,3.182-2.743,.14,1.021,.241,2.198,.241,3.475,0,3.152-.631,5.748-.936,6.815Z"/>
            </svg>
          </a>
          <div class="text-xs flex items-center font-bold group transition-colors hover:bg-blue-600" id="email-popup">
            <span>hello@dennis-abrams.com</span>
            <svg
              class="w-4 h-4 ml-2 fill-black group-hover:fill-black transition-colors"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path d="m13 20a5.006 5.006 0 0 0 5-5v-8.757a3.972 3.972 0 0 0 -1.172-2.829l-2.242-2.242a3.972 3.972 0 0 0 -2.829-1.172h-4.757a5.006 5.006 0 0 0 -5 5v10a5.006 5.006 0 0 0 5 5zm-9-5v-10a3 3 0 0 1 3-3s4.919.014 5 .024v1.976a2 2 0 0 0 2 2h1.976c.01.081.024 9 .024 9a3 3 0 0 1 -3 3h-6a3 3 0 0 1 -3-3zm18-7v11a5.006 5.006 0 0 1 -5 5h-9a1 1 0 0 1 0-2h9a3 3 0 0 0 3-3v-11a1 1 0 0 1 2 0z"/>
            </svg>
          </div>
        </div>
        <div class="particle-container" id="particle-container"></div>
        <script>
          let particleIntervalId;

          function generateParticle() {
            const button = document.getElementById('contact-button');
            const particleContainer = document.getElementById('particle-container');
            if (!button || !particleContainer) return;

            const buttonRect = button.getBoundingClientRect();
            const particle = document.createElement('div');
            particle.classList.add('particle');
            particle.style.left = `${buttonRect.left + buttonRect.width / 2 - 5}px`;
            particle.style.top = `${buttonRect.top + buttonRect.height / 2 - 5}px`;
            const angle = Math.random() * 2 * Math.PI;

            // Mobile-responsive particle spread
            const isMobile = window.innerWidth < 640;
            const distance = isMobile ? Math.random() * 140 + 120 : Math.random() * 150 + 130;
            const horizontalFactor = isMobile ? 1.8 : 2.2;
            const verticalFactor = isMobile ? 0.7 : 0.8;

            const x = Math.cos(angle) * distance * horizontalFactor;
            const y = Math.sin(angle) * distance * verticalFactor;
            particle.style.setProperty('--x', `${x}px`);
            particle.style.setProperty('--y', `${y}px`);
            particleContainer.appendChild(particle);

            setTimeout(() => {
              if (particleContainer.contains(particle)) {
                particleContainer.removeChild(particle);
              }
            }, 1500);
          }

          function startParticles() {
            stopParticles();
            particleIntervalId = setInterval(generateParticle, 150);
          }

          function stopParticles() {
            if (particleIntervalId) {
              clearInterval(particleIntervalId);
              particleIntervalId = null;
            }
          }


          const handleMouseEnter = () => stopParticles();
          const handleMouseLeave = () => startParticles();

          function initializeParticles() {
            stopParticles();

            const particleContainer = document.getElementById('particle-container');
            if (particleContainer) {
              particleContainer.innerHTML = '';
            }

            const button = document.getElementById('contact-button');
            if (!button || !particleContainer) return;

            startParticles();

            const container = document.querySelector('.button-container');
            if (container) {
              container.removeEventListener('mouseenter', handleMouseEnter);
              container.removeEventListener('mouseleave', handleMouseLeave);
              container.addEventListener('mouseenter', handleMouseEnter);
              container.addEventListener('mouseleave', handleMouseLeave);
            }
          }

          function cleanupParticles() {
            stopParticles();

            const container = document.querySelector('.button-container');
            if (container) {
              container.removeEventListener('mouseenter', handleMouseEnter);
              container.removeEventListener('mouseleave', handleMouseLeave);
            }

            const particleContainer = document.getElementById('particle-container');
            if (particleContainer) {
              particleContainer.innerHTML = '';
            }
          }

          document.addEventListener('astro:page-load', initializeParticles);
          document.addEventListener('astro:before-swap', cleanupParticles);
          document.addEventListener('astro:page-unload', cleanupParticles);
        </script>

        <script>
          function initializeEmailPopup() {
            const emailPopup = document.getElementById('email-popup');
            if (!emailPopup) return;
            let isTransitioning = false;
            emailPopup.removeEventListener('click', handleClick);
            function handleClick() {
              if (isTransitioning) return;
              isTransitioning = true;
              const email = 'hello@dennis-abrams.com';
              navigator.clipboard.writeText(email)
                .then(() => {
                  const svg = emailPopup.querySelector('svg');
                  if (svg) {
                    svg.innerHTML = `<path d="M5 13l4 4L19 7" stroke="currentColor" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round"/>`;
                  }
                  emailPopup.style.pointerEvents = 'none';
                  setTimeout(() => {
                    if (svg) {
                      svg.innerHTML = `<path d="m13 20a5.006 5.006 0 0 0 5-5v-8.757a3.972 3.972 0 0 0 -1.172-2.829l-2.242-2.242a3.972 3.972 0 0 0 -2.829-1.172h-4.757a5.006 5.006 0 0 0 -5 5v10a5.006 5.006 0 0 0 5 5zm-9-5v-10a3 3 0 0 1 3-3s4.919.014 5 .024v1.976a2 2 0 0 0 2 2h1.976c.01.081.024 9 .024 9a3 3 0 0 1 -3 3h-6a3 3 0 0 1 -3-3zm18-7v11a5.006 5.006 0 0 1 -5 5h-9a1 1 0 0 1 0-2h9a3 3 0 0 0 3-3v-11a1 1 0 0 1 2 0z"/>`;
                    }
                    emailPopup.style.pointerEvents = 'auto';
                    isTransitioning = false;
                  }, 1250);
                });
            }
            emailPopup.addEventListener('click', handleClick);
          }
          document.addEventListener('astro:page-load', initializeEmailPopup);
        </script>
        <script>
          function initializeAvatarHover() {
            // Get all avatar pairs across all breakpoints
            const normalImgs = document.querySelectorAll('.avatar-normal');
            const hoverImgs = document.querySelectorAll('.avatar-hover');

            // Clear any existing timeouts
            normalImgs.forEach(img => {
              if (img.hoverTimeout) clearTimeout(img.hoverTimeout);
              if (img.returnTimeout) clearTimeout(img.returnTimeout);
            });

            hoverImgs.forEach(img => {
              if (img.hoverTimeout) clearTimeout(img.hoverTimeout);
              if (img.returnTimeout) clearTimeout(img.returnTimeout);
            });

            function simulateHover() {
              // Apply hover effect to all avatar instances
              normalImgs.forEach(img => {
                img.classList.add('opacity-0');
              });

              hoverImgs.forEach(img => {
                img.classList.add('opacity-100');
              });

              // Return to normal state after 3 seconds
              const returnTimeout = setTimeout(() => {
                normalImgs.forEach(img => {
                  img.classList.remove('opacity-0');
                });

                hoverImgs.forEach(img => {
                  img.classList.remove('opacity-100');
                });
              }, 3000);

              // Store timeout references for cleanup
              normalImgs.forEach(img => {
                img.returnTimeout = returnTimeout;
              });
            }

            // Start automatic hover effect after 2 seconds
            const hoverTimeout = setTimeout(simulateHover, 2000);

            // Store timeout references for cleanup
            normalImgs.forEach(img => {
              img.hoverTimeout = hoverTimeout;
            });
          }

          function cleanupAvatarHover() {
            const normalImgs = document.querySelectorAll('.avatar-normal');
            const hoverImgs = document.querySelectorAll('.avatar-hover');

            // Clear all timeouts
            normalImgs.forEach(img => {
              if (img.hoverTimeout) clearTimeout(img.hoverTimeout);
              if (img.returnTimeout) clearTimeout(img.returnTimeout);
            });

            hoverImgs.forEach(img => {
              if (img.hoverTimeout) clearTimeout(img.hoverTimeout);
              if (img.returnTimeout) clearTimeout(img.returnTimeout);
            });

            // Reset to normal state
            normalImgs.forEach(img => {
              img.classList.remove('opacity-0');
            });

            hoverImgs.forEach(img => {
              img.classList.remove('opacity-100');
            });
          }

          document.addEventListener('astro:page-load', initializeAvatarHover);
          document.addEventListener('astro:before-swap', cleanupAvatarHover);
          document.addEventListener('astro:page-unload', cleanupAvatarHover);
        </script>
        <script>
          function initializeInteractiveText() {
            const interactiveTexts = document.querySelectorAll('.interactive-text');
            interactiveTexts.forEach(text => {
              const characters = text.textContent.split('');
              text.innerHTML = '';
              characters.forEach(char => {
                const span = document.createElement('span');
                span.classList.add('interactive-letter');
                span.textContent = char;
                text.appendChild(span);
              });
            });
            const interactiveLetters = document.querySelectorAll('.interactive-letter');
            let animationFrameId;
            const handleMouseMove = (e) => {
              const mouseX = e.clientX;
              const mouseY = e.clientY;
              if (animationFrameId) {
                cancelAnimationFrame(animationFrameId);
              }
              animationFrameId = requestAnimationFrame(() => {
                interactiveLetters.forEach(letter => {
                  const rect = letter.getBoundingClientRect();
                  const letterX = rect.left + rect.width / 2;
                  const letterY = rect.top + rect.height / 2;
                  const dx = mouseX - letterX;
                  const dy = mouseY - letterY;
                  const distance = Math.sqrt(dx * dx + dy * dy);
                  const maxDistance = 300;
                  if (distance < maxDistance) {
                    const intensity = Math.max(0, Math.min(1, 1 - distance / maxDistance)).toFixed(2);
                    letter.style.setProperty('--intensity', intensity);
                    letter.classList.add('active');
                  } else {
                    letter.classList.remove('active');
                  }
                });
              });
            };
            document.removeEventListener('mousemove', handleMouseMove);
            document.addEventListener('mousemove', handleMouseMove);
          }
          document.addEventListener('astro:page-load', initializeInteractiveText);
        </script>
        <script>
          import { annotate } from 'rough-notation';
          function initializeRoughNotation() {
            const element = document.querySelector('#underline-effect');
            if (element) {
              const annotation = annotate(element, {
                type: 'underline',
                color: 'white',
                padding: -45,
                animate: false
              });
              annotation.show();
            }
          }
          document.addEventListener('astro:page-load', initializeRoughNotation);
        </script>
      </div>
    </div>
  </div>
</section>
